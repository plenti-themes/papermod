/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	text
} from '../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (24:2) {#each tagList as tag}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*tag*/ ctx[4].name + "";
	let t0;
	let sup;
	let t1_value = /*tag*/ ctx[4].count + "";
	let t1;
	let a_href_value;

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			sup = element("sup");
			t1 = text(t1_value);
			this.h();
		},
		l(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			sup = claim_element(a_nodes, "SUP", { class: true });
			var sup_nodes = children(sup);
			t1 = claim_text(sup_nodes, t1_value);
			sup_nodes.forEach(detach);
			a_nodes.forEach(detach);
			li_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(sup, "class", "svelte-1iku80c");
			attr(a, "href", a_href_value = /*tag*/ ctx[4].path);
			attr(a, "class", "svelte-1iku80c");
			attr(li, "class", "svelte-1iku80c");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, sup);
			append(sup, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment(ctx) {
	let ul;
	let each_value = /*tagList*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(ul, "class", "svelte-1iku80c");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*tagList*/ 1) {
				each_value = /*tagList*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { allContent } = $$props;
	let { tags = allContent.filter(content => content.type == "tags") } = $$props;
	let posts = allContent.filter(content => content.type == "posts");
	let tagList = [];

	tags.forEach(tag => {
		let count = 0;
		let tagName = tag.filename ? tag.filename.replace(".json", "") : tag;

		posts.forEach(post => {
			if (post.fields.tags && post.fields.tags.includes(tagName)) {
				count++;
			}
		});

		tagList.push({
			name: tagName,
			path: "tags/" + tagName,
			count
		});
	});

	$$self.$$set = $$props => {
		if ("allContent" in $$props) $$invalidate(1, allContent = $$props.allContent);
		if ("tags" in $$props) $$invalidate(2, tags = $$props.tags);
	};

	return [tagList, allContent, tags];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { allContent: 1, tags: 2 });
	}
}

export default Component;